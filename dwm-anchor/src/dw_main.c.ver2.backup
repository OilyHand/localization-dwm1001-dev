#include <zephyr.h>
#include <sys/printk.h>
#include <stdio.h>
#include <string.h>

#include "deca_device_api.h"
#include "deca_regs.h"
#include "deca_spi.h"
#include "port.h"

#include "ble_device.h"

#define LOG_LEVEL 3
#include <logging/log.h>
LOG_MODULE_REGISTER(main);

// Device information
#define DEV_HEADER  "*** DWM1001-Ranging Project ***\n"
#define DEV_TYPE    "Anchor\n"
#define DEV_ID      0x01
#define DEV_LINE    "============================\n"

// Default communication configuration
dwt_config_t config = {
    5,               // Channel number
    DWT_PRF_64M,     // Pulse Repetition Frequency
    DWT_PLEN_128,    // Preamble Length
    DWT_PAC8,        // Preamble Accumulator
    9,               // TX Code
    9,               // RX Code
    1,               // SFD Timeout
    DWT_BR_6M8,      // Data Rate
    DWT_PHRMODE_STD, // PHR Mode
    129              // SFD timeout (preamble length + 1 + SFD length - PAC size).
};

// Default antenna delay values for 64 MHz PRF
#define TX_ANT_DLY 16436
#define RX_ANT_DLY 16436

/*  Message frames
 *  # Common Header
 *  (1) Frame Control (FC):
 *      - Blink Message: {0xC5} (1 byte FC)
 *      - Ranging Init Message: {0x41, 0x88} (src: 16 bits, dst: 16 bits)
 *      - Poll, Resp, Final Messages: {0x41, 0x88} (src: 16 bits, dst: 16 bits)
 *
 *  (2) Sequence Number (SN): (1 byte, unsigned)
 *      - Incremented for each message sent
 *
 *  (3) PAN ID: (2 bytes, unsigned)
 *      - Network Identifier: {0xCA, 0xDE} (temporary use DECA as PAN ID)
 *      - If network is expanded, this should be set to the actual PAN ID (not considered here)
 *
 *  # Blink Message Only
 *  (1) Tag ID: (2 bytes, unsigned, can be extended if tag device is larger)
 *      - Device ID: 0x10 (for this example)
 *
 *  # Ranging Init Message Only
 * Destination Address (DST) 2 bytes (16 bits):
 *  Source Address (SRC) 2 bytes (16 bits):
 *
 */

static uint8 rx_poll_msg[12];
static uint8 tx_resp_msg[] = {0x41, 0x88, 0, 0xCA, 0xDE, 'V', 'E', 'W', 'A', 0x10, 0x02, 0, 0, 0, 0};
static uint8 rx_final_msg[] = {0x41, 0x88, 0, 0xCA, 0xDE, 'W', 'A', 'V', 'E', 0x23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// Length of the common part of the message
#define ALL_MSG_COMMON_LEN 10
#define ALL_MSG_SN_IDX 2
#define POLL_DEVICE_ID_IDX 10
#define FINAL_MSG_POLL_TX_TS_IDX 10
#define FINAL_MSG_RESP_RX_TS_IDX 14
#define FINAL_MSG_FINAL_TX_TS_IDX 18
#define FINAL_MSG_TS_LEN 4

// Frame sequence number
static uint8 frame_seq_nb = 0;
static uint8 frame_seq_nb_rx = 0;

// Buffer to store received messages
#define RX_BUF_LEN 24
static uint8 rx_buffer[RX_BUF_LEN];
static uint32 status_reg = 0;

// UWB microsecond (uus) to device time unit (dtu, around 15.65 ps)
// 1 uus = 512 / 499.2 usec and 1 usec = 499.2 * 128 dtu.
#define UUS_TO_DWT_TIME 65536

// Delay definitions
#define POLL_RX_TO_RESP_TX_DLY_UUS 6000
#define RESP_TX_TO_FINAL_RX_DLY_UUS 500
#define FINAL_RX_TIMEOUT_UUS 65000 // final message receive timeout
#define PRE_TIMEOUT 30 // preamble timeout

// Data types for timestamps (need 40 bits)
typedef signed long long   int64;
typedef unsigned long long uint64;

// timestamp variables for ds_twr_resp device
static uint64 poll_rx_ts;
static uint64 resp_tx_ts;
static uint64 final_rx_ts;

// Speed of light in air (in mm/us)
#define SPEED_OF_LIGHT 299702547

// distance calculation variables
static double tof;
static double distance;
char dist_str[16] = {0}; // for displaying distance in console


// Main application entry point
int dw_main(void) {
    printk(DEV_HEADER);
    printk("Device Type: ");
    printk(DEV_TYPE);
    printk("Device ID: 0x%02X\n", DEV_ID);
    printk(DEV_LINE);

    openspi();
    reset_DW1000();
    port_set_dw1000_slowrate();
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR) {
        printk("INIT FAILED");
        k_sleep(K_MSEC(500));
        while (1)
        { };
    }
    port_set_dw1000_fastrate();

    dwt_configure(&config);
    dwt_setrxantennadelay(RX_ANT_DLY);
    dwt_settxantennadelay(TX_ANT_DLY);
    dwt_setleds(1);

    k_yield();

    ble_reps_t * ble_reps;
    uint8_t ble_buf[120] = {0};
    ble_reps = (ble_reps_t *)(&ble_buf[0]);

    k_yield();

    while (1) {
        dwt_setrxtimeout(0);
        dwt_rxenable(DWT_START_RX_IMMEDIATE);

        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) &
            (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
        { };

        if (status_reg & SYS_STATUS_RXFCG) {
            uint32 frame_len;

            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
            if (frame_len <= RX_BUF_LEN) {
                dwt_readrxdata(rx_buffer, frame_len, 0);
            }

            if (rx_buffer[POLL_DEVICE_ID_IDX] != DEVICE_ID) continue;

            if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0) {
                poll_rx_ts = get_rx_timestamp_u64();
                uint32 resp_tx_time = (poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
                dwt_setdelayedtrxtime(resp_tx_time);
                dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
                dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS);

                dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0);
                dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1);
                if (dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED) == DWT_ERROR) continue;

                while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) &
                         (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR))) {}

                if (status_reg & SYS_STATUS_RXFCG) {
                    uint32 frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
                    if (frame_len <= RX_BUF_LEN) {
                        dwt_readrxdata(rx_buffer, frame_len, 0);
                    }

                    if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0) {
                        uint32 poll_tx_ts, resp_rx_ts, final_tx_ts;
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);

                        resp_tx_ts = get_tx_timestamp_u64();
                        final_rx_ts = get_rx_timestamp_u64();

                        uint32 poll_rx_ts_32 = (uint32)poll_rx_ts;
                        uint32 resp_tx_ts_32 = (uint32)resp_tx_ts;
                        uint32 final_rx_ts_32 = (uint32)final_rx_ts;

                        double Ra = (double)(resp_rx_ts - poll_tx_ts);
                        double Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
                        double Da = (double)(final_tx_ts - resp_rx_ts);
                        double Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);

                        int64 tof_dtu = (int64)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
                        tof = tof_dtu * DWT_TIME_UNITS;
                        distance = tof * SPEED_OF_LIGHT;

                        ble_reps->cnt = 1;
                        ble_reps->ble_rep[0].node_id = DEVICE_ID;
                        ble_reps->ble_rep[0].dist = (float)distance;
                        ble_reps->ble_rep[0].tqf = 0;

                        dwm1001_notify((uint8_t*)ble_buf,
                                       1 + sizeof(ble_rep_t) * ble_reps->cnt);
                    }
                } else {
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
                    dwt_rxreset();
                }
            }
        } else {
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
            dwt_rxreset();
        }
    }
    return 0;
}


static uint64 get_tx_timestamp_u64(void) {
    uint8 ts_tab[5];
    uint64 ts = 0;
    dwt_readtxtimestamp(ts_tab);
    for (int i = 4; i >= 0; i--) {
        ts = (ts << 8) | ts_tab[i];
    }
    return ts;
}

static uint64 get_rx_timestamp_u64(void) {
    uint8 ts_tab[5];
    uint64 ts = 0;
    dwt_readrxtimestamp(ts_tab);
    for (int i = 4; i >= 0; i--) {
        ts = (ts << 8) | ts_tab[i];
    }
    return ts;
}

static void final_msg_get_ts(const uint8 * ts_field, uint32 * ts) {
    *ts = 0;
    for (int i = 0; i < FINAL_MSG_TS_LEN; i++) {
        *ts += ts_field[i] << (i * 8);
    }
}